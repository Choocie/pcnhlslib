#include <iostream>
#include "hls_stream.h"
#include "dut.h"

int main() {

    bool fail = false;

    int num = 15;
    hls::stream<int> numStream;
    numStream << num;

    input_t query[N*F_C] =                 {-0.373, 0.059, 0.224, -0.220, 0.125, -0.75,
                                            -0.490, 0.369, 0.082, -0.200, 0.086, -0.061,
                                            0.231, -0.102, -0.486, -0.333, 0.71, 0.026,
                                            0.008, 0.365, 0.427, 0.329, -0.14, 0.38,
                                            0.243, 0.274, 0.290, 0.424, 0.0904, 0.741,
                                            0.153, 0.443, 0.004, -0.274, 0.008, -0.2,
                                            -0.361, -0.071, 0.086, -0.177, 0.012, -0.003,
                                            -0.090, 0.204, 0.173, 0.075, 0.27, -0.068,
                                            -0.467, -0.349, 0.224, 0.090, 0.807, 0.416,
                                            -0.165, -0.416, 0.302, 0.224, -0.580, -0.14,
                                            0.416, 0.459, 0.039, -0.047, 0.417, -0.025,
                                            0.035, -0.294, 0.380, 0.486, 0.078, -0.12,
                                            0.020, -0.373, -0.294, -0.125, 0.98, -0.971,
                                            -0.412, -0.075, -0.180, 0.365, 0.063, -0.367,
                                            0.208, -0.314, -0.353, -0.177, 0.085, -0.045,
                                            -0.369, -0.302, 0.467, 0.173, 0.45, -0.875};


    input_t points[N*F_C] =                 {-0.373, 0.059, 0.224, -0.220, 0.125, -0.75,
                                             -0.490, 0.369, 0.082, -0.200, 0.086, -0.061,
                                             0.231, -0.102, -0.486, -0.333, 0.71, 0.026,
                                             0.008, 0.365, 0.427, 0.329, -0.14, 0.38,
                                             0.243, 0.274, 0.290, 0.424, 0.0904, 0.741,
                                             0.153, 0.443, 0.004, -0.274, 0.008, -0.2,
                                             -0.361, -0.071, 0.086, -0.177, 0.012, -0.003,
                                             -0.090, 0.204, 0.173, 0.075, 0.27, -0.068,
                                             -0.467, -0.349, 0.224, 0.090, 0.807, 0.416,
                                             -0.165, -0.416, 0.302, 0.224, -0.580, -0.14,
                                             0.416, 0.459, 0.039, -0.047, 0.417, -0.025,
                                             0.035, -0.294, 0.380, 0.486, 0.078, -0.12,
                                             0.020, -0.373, -0.294, -0.125, 0.98, -0.971,
                                             -0.412, -0.075, -0.180, 0.365, 0.063, -0.367,
                                             0.208, -0.314, -0.353, -0.177, 0.085, -0.045,
                                             -0.369, -0.302, 0.467, 0.173, 0.45, -0.875};

    float reference[N*F_C] =                {-0.373, 0.059, 0.224, -0.220, 0.125, -0.75,
                                             -0.490, 0.369, 0.082, -0.200, 0.086, -0.061,
                                             0.231, -0.102, -0.486, -0.333, 0.71, 0.026,
                                             0.008, 0.365, 0.427, 0.329, -0.14, 0.38,
                                             0.243, 0.274, 0.290, 0.424, 0.0904, 0.741,
                                             0.153, 0.443, 0.004, -0.274, 0.008, -0.2,
                                             -0.361, -0.071, 0.086, -0.177, 0.012, -0.003,
                                             -0.090, 0.204, 0.173, 0.075, 0.27, -0.068,
                                             -0.467, -0.349, 0.224, 0.090, 0.807, 0.416,
                                             -0.165, -0.416, 0.302, 0.224, -0.580, -0.14,
                                             0.416, 0.459, 0.039, -0.047, 0.417, -0.025,
                                             0.035, -0.294, 0.380, 0.486, 0.078, -0.12,
                                             0.020, -0.373, -0.294, -0.125, 0.98, -0.971,
                                             -0.412, -0.075, -0.180, 0.365, 0.063, -0.367,
                                             0.208, -0.314, -0.353, -0.177, 0.085, -0.045,
                                             -0.369, -0.302, 0.467, 0.173, 0.45, -0.875};


    std::array<std::array<float,N>,N> distancesGolden;
    distance_golden_model<N,F_C,distance_t::width,distance_t::iwidth>(reference,distancesGolden,num);

    hls::stream<std::array<distance_t,N>> outputStream[PAR];
    dut(query,points,outputStream,numStream);

    for(int ii = 0; ii < II; ii++) {
        for(int  p = 0; p < PAR; p++) {
            std::array<distance_t,N> distance;
            outputStream[p] >> distance;
            for (int n = 0; n < N; n++) {
                if(abs(static_cast<float>(distance[n]) - static_cast<float>(distancesGolden[ii*PAR + p][n])) > 1e-2) {
                    fail = true;
                    std::cout << "Got " << distance[n] << " expected " << distancesGolden[ii*PAR + p][n] << std::endl;
                }
            }
        }
    }

    if(fail) {
        std::cout << "FAIL" << std::endl;
    } else {
        std::cout << "SUCCESS" << std::endl;
    }

    return 0;
}
